// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/dict.proto

package dictGrpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DictClient is the client API for Dict service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictClient interface {
	GetWords(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Words, error)
	GetTags(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TagsResponse, error)
	CreateNewWord(ctx context.Context, in *CreateWord, opts ...grpc.CallOption) (*Status, error)
	RemoveWord(ctx context.Context, in *WordId, opts ...grpc.CallOption) (*Status, error)
	EditWord(ctx context.Context, in *UpdateWord, opts ...grpc.CallOption) (*Status, error)
}

type dictClient struct {
	cc grpc.ClientConnInterface
}

func NewDictClient(cc grpc.ClientConnInterface) DictClient {
	return &dictClient{cc}
}

func (c *dictClient) GetWords(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Words, error) {
	out := new(Words)
	err := c.cc.Invoke(ctx, "/Dict/GetWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) GetTags(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TagsResponse, error) {
	out := new(TagsResponse)
	err := c.cc.Invoke(ctx, "/Dict/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) CreateNewWord(ctx context.Context, in *CreateWord, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Dict/CreateNewWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) RemoveWord(ctx context.Context, in *WordId, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Dict/RemoveWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) EditWord(ctx context.Context, in *UpdateWord, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Dict/EditWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictServer is the server API for Dict service.
// All implementations must embed UnimplementedDictServer
// for forward compatibility
type DictServer interface {
	GetWords(context.Context, *UserId) (*Words, error)
	GetTags(context.Context, *empty.Empty) (*TagsResponse, error)
	CreateNewWord(context.Context, *CreateWord) (*Status, error)
	RemoveWord(context.Context, *WordId) (*Status, error)
	EditWord(context.Context, *UpdateWord) (*Status, error)
	mustEmbedUnimplementedDictServer()
}

// UnimplementedDictServer must be embedded to have forward compatible implementations.
type UnimplementedDictServer struct {
}

func (UnimplementedDictServer) GetWords(context.Context, *UserId) (*Words, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWords not implemented")
}
func (UnimplementedDictServer) GetTags(context.Context, *empty.Empty) (*TagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedDictServer) CreateNewWord(context.Context, *CreateWord) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewWord not implemented")
}
func (UnimplementedDictServer) RemoveWord(context.Context, *WordId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWord not implemented")
}
func (UnimplementedDictServer) EditWord(context.Context, *UpdateWord) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditWord not implemented")
}
func (UnimplementedDictServer) mustEmbedUnimplementedDictServer() {}

// UnsafeDictServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictServer will
// result in compilation errors.
type UnsafeDictServer interface {
	mustEmbedUnimplementedDictServer()
}

func RegisterDictServer(s grpc.ServiceRegistrar, srv DictServer) {
	s.RegisterService(&Dict_ServiceDesc, srv)
}

func _Dict_GetWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).GetWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dict/GetWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).GetWords(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dict/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).GetTags(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_CreateNewWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).CreateNewWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dict/CreateNewWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).CreateNewWord(ctx, req.(*CreateWord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_RemoveWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).RemoveWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dict/RemoveWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).RemoveWord(ctx, req.(*WordId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_EditWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).EditWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dict/EditWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).EditWord(ctx, req.(*UpdateWord))
	}
	return interceptor(ctx, in, info, handler)
}

// Dict_ServiceDesc is the grpc.ServiceDesc for Dict service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dict_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dict",
	HandlerType: (*DictServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWords",
			Handler:    _Dict_GetWords_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _Dict_GetTags_Handler,
		},
		{
			MethodName: "CreateNewWord",
			Handler:    _Dict_CreateNewWord_Handler,
		},
		{
			MethodName: "RemoveWord",
			Handler:    _Dict_RemoveWord_Handler,
		},
		{
			MethodName: "EditWord",
			Handler:    _Dict_EditWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dict.proto",
}
