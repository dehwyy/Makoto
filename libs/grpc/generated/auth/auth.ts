//@ts-nocheck
/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies,eslint_disable
// @generated from protobuf file "auth.proto" (package "auth", syntax proto3)
// tslint:disable
import { IsSuccess } from "./general";
import { UserId } from "./general";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message auth.SignUpRequest
 */
export interface SignUpRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
}
/**
 * @generated from protobuf message auth.SignInRequest
 */
export interface SignInRequest {
    /**
     * @generated from protobuf oneof: auth_method
     */
    authMethod: {
        oneofKind: "credentials";
        /**
         * @generated from protobuf field: auth.SignInRequest.UserCredentials credentials = 1;
         */
        credentials: SignInRequest_UserCredentials; // should be provided if SignIn not via OAuth2
    } | {
        oneofKind: "oauth2";
        /**
         * @generated from protobuf field: auth.SignInRequest.UserOAuth2 oauth2 = 2;
         */
        oauth2: SignInRequest_UserOAuth2;
    } | {
        oneofKind: "token";
        /**
         * @generated from protobuf field: string token = 3;
         */
        token: string; // via authorization token
    } | {
        oneofKind: undefined;
    };
}
/**
 * Credentials: if User.Provider == local (db) @see /libs/models/user_data.go
 *
 * @generated from protobuf message auth.SignInRequest.UserCredentials
 */
export interface SignInRequest_UserCredentials {
    /**
     * @generated from protobuf oneof: unique_identifier
     */
    uniqueIdentifier: {
        oneofKind: "email";
        /**
         * @generated from protobuf field: string email = 101;
         */
        email: string;
    } | {
        oneofKind: "username";
        /**
         * @generated from protobuf field: string username = 102;
         */
        username: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: string password = 103;
     */
    password: string;
}
/**
 * @generated from protobuf message auth.SignInRequest.UserOAuth2
 */
export interface SignInRequest_UserOAuth2 {
    /**
     * @generated from protobuf field: string provider = 200;
     */
    provider: string;
    /**
     * @generated from protobuf field: optional string code = 201;
     */
    code?: string; // could be provided on direct authorization
}
/**
 * @generated from protobuf message auth.AuthResponse
 */
export interface AuthResponse {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: string userId = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string username = 3;
     */
    username: string;
}
/**
 * @generated from protobuf message auth.IsUniqueUsernamePayload
 */
export interface IsUniqueUsernamePayload {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
}
/**
 * @generated from protobuf message auth.IsUnique
 */
export interface IsUnique {
    /**
     * @generated from protobuf field: bool isUnique = 1;
     */
    isUnique: boolean;
}
/**
 * @generated from protobuf message auth.ChangePasswordPayload
 */
export interface ChangePasswordPayload {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string old_password = 2;
     */
    oldPassword: string;
    /**
     * @generated from protobuf field: string new_password = 3;
     */
    newPassword: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SignUpRequest$Type extends MessageType<SignUpRequest> {
    constructor() {
        super("auth.SignUpRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignUpRequest>): SignUpRequest {
        const message = { username: "", password: "", email: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignUpRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignUpRequest): SignUpRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignUpRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SignUpRequest
 */
export const SignUpRequest = new SignUpRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignInRequest$Type extends MessageType<SignInRequest> {
    constructor() {
        super("auth.SignInRequest", [
            { no: 1, name: "credentials", kind: "message", oneof: "authMethod", T: () => SignInRequest_UserCredentials },
            { no: 2, name: "oauth2", kind: "message", oneof: "authMethod", T: () => SignInRequest_UserOAuth2 },
            { no: 3, name: "token", kind: "scalar", oneof: "authMethod", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignInRequest>): SignInRequest {
        const message = { authMethod: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignInRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignInRequest): SignInRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* auth.SignInRequest.UserCredentials credentials */ 1:
                    message.authMethod = {
                        oneofKind: "credentials",
                        credentials: SignInRequest_UserCredentials.internalBinaryRead(reader, reader.uint32(), options, (message.authMethod as any).credentials)
                    };
                    break;
                case /* auth.SignInRequest.UserOAuth2 oauth2 */ 2:
                    message.authMethod = {
                        oneofKind: "oauth2",
                        oauth2: SignInRequest_UserOAuth2.internalBinaryRead(reader, reader.uint32(), options, (message.authMethod as any).oauth2)
                    };
                    break;
                case /* string token */ 3:
                    message.authMethod = {
                        oneofKind: "token",
                        token: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignInRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* auth.SignInRequest.UserCredentials credentials = 1; */
        if (message.authMethod.oneofKind === "credentials")
            SignInRequest_UserCredentials.internalBinaryWrite(message.authMethod.credentials, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* auth.SignInRequest.UserOAuth2 oauth2 = 2; */
        if (message.authMethod.oneofKind === "oauth2")
            SignInRequest_UserOAuth2.internalBinaryWrite(message.authMethod.oauth2, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string token = 3; */
        if (message.authMethod.oneofKind === "token")
            writer.tag(3, WireType.LengthDelimited).string(message.authMethod.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SignInRequest
 */
export const SignInRequest = new SignInRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignInRequest_UserCredentials$Type extends MessageType<SignInRequest_UserCredentials> {
    constructor() {
        super("auth.SignInRequest.UserCredentials", [
            { no: 101, name: "email", kind: "scalar", oneof: "uniqueIdentifier", T: 9 /*ScalarType.STRING*/ },
            { no: 102, name: "username", kind: "scalar", oneof: "uniqueIdentifier", T: 9 /*ScalarType.STRING*/ },
            { no: 103, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignInRequest_UserCredentials>): SignInRequest_UserCredentials {
        const message = { uniqueIdentifier: { oneofKind: undefined }, password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignInRequest_UserCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignInRequest_UserCredentials): SignInRequest_UserCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 101:
                    message.uniqueIdentifier = {
                        oneofKind: "email",
                        email: reader.string()
                    };
                    break;
                case /* string username */ 102:
                    message.uniqueIdentifier = {
                        oneofKind: "username",
                        username: reader.string()
                    };
                    break;
                case /* string password */ 103:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignInRequest_UserCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 101; */
        if (message.uniqueIdentifier.oneofKind === "email")
            writer.tag(101, WireType.LengthDelimited).string(message.uniqueIdentifier.email);
        /* string username = 102; */
        if (message.uniqueIdentifier.oneofKind === "username")
            writer.tag(102, WireType.LengthDelimited).string(message.uniqueIdentifier.username);
        /* string password = 103; */
        if (message.password !== "")
            writer.tag(103, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SignInRequest.UserCredentials
 */
export const SignInRequest_UserCredentials = new SignInRequest_UserCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignInRequest_UserOAuth2$Type extends MessageType<SignInRequest_UserOAuth2> {
    constructor() {
        super("auth.SignInRequest.UserOAuth2", [
            { no: 200, name: "provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 201, name: "code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignInRequest_UserOAuth2>): SignInRequest_UserOAuth2 {
        const message = { provider: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignInRequest_UserOAuth2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignInRequest_UserOAuth2): SignInRequest_UserOAuth2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string provider */ 200:
                    message.provider = reader.string();
                    break;
                case /* optional string code */ 201:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignInRequest_UserOAuth2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string provider = 200; */
        if (message.provider !== "")
            writer.tag(200, WireType.LengthDelimited).string(message.provider);
        /* optional string code = 201; */
        if (message.code !== undefined)
            writer.tag(201, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SignInRequest.UserOAuth2
 */
export const SignInRequest_UserOAuth2 = new SignInRequest_UserOAuth2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthResponse$Type extends MessageType<AuthResponse> {
    constructor() {
        super("auth.AuthResponse", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthResponse>): AuthResponse {
        const message = { token: "", userId: "", username: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthResponse): AuthResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* string userId */ 2:
                    message.userId = reader.string();
                    break;
                case /* string username */ 3:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* string userId = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string username = 3; */
        if (message.username !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.AuthResponse
 */
export const AuthResponse = new AuthResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsUniqueUsernamePayload$Type extends MessageType<IsUniqueUsernamePayload> {
    constructor() {
        super("auth.IsUniqueUsernamePayload", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IsUniqueUsernamePayload>): IsUniqueUsernamePayload {
        const message = { username: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsUniqueUsernamePayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsUniqueUsernamePayload): IsUniqueUsernamePayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsUniqueUsernamePayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.IsUniqueUsernamePayload
 */
export const IsUniqueUsernamePayload = new IsUniqueUsernamePayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsUnique$Type extends MessageType<IsUnique> {
    constructor() {
        super("auth.IsUnique", [
            { no: 1, name: "isUnique", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IsUnique>): IsUnique {
        const message = { isUnique: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsUnique>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsUnique): IsUnique {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isUnique */ 1:
                    message.isUnique = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsUnique, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isUnique = 1; */
        if (message.isUnique !== false)
            writer.tag(1, WireType.Varint).bool(message.isUnique);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.IsUnique
 */
export const IsUnique = new IsUnique$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePasswordPayload$Type extends MessageType<ChangePasswordPayload> {
    constructor() {
        super("auth.ChangePasswordPayload", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "old_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangePasswordPayload>): ChangePasswordPayload {
        const message = { userId: "", oldPassword: "", newPassword: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangePasswordPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePasswordPayload): ChangePasswordPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string old_password */ 2:
                    message.oldPassword = reader.string();
                    break;
                case /* string new_password */ 3:
                    message.newPassword = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePasswordPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string old_password = 2; */
        if (message.oldPassword !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.oldPassword);
        /* string new_password = 3; */
        if (message.newPassword !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newPassword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.ChangePasswordPayload
 */
export const ChangePasswordPayload = new ChangePasswordPayload$Type();
/**
 * @generated ServiceType for protobuf service auth.AuthRPC
 */
export const AuthRPC = new ServiceType("auth.AuthRPC", [
    { name: "SignUp", options: {}, I: SignUpRequest, O: AuthResponse },
    { name: "SignIn", options: {}, I: SignInRequest, O: AuthResponse },
    { name: "IsUniqueUsername", options: {}, I: IsUniqueUsernamePayload, O: IsUnique },
    { name: "VerifyUserEmail", options: {}, I: UserId, O: IsSuccess },
    { name: "ChangePassword", options: {}, I: ChangePasswordPayload, O: IsSuccess },
    { name: "Logout", options: {}, I: UserId, O: IsSuccess }
]);
