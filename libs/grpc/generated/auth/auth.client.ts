/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies,eslint_disable
// @generated from protobuf file "auth.proto" (package "auth", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AuthRPC } from "./auth";
import type { ChangePasswordPayload } from "./auth";
import type { IsSuccess } from "./general";
import type { UserId } from "./general";
import type { IsUnique } from "./auth";
import type { IsUniqueUsernamePayload } from "./auth";
import type { SignInRequest } from "./auth";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AuthResponse } from "./auth";
import type { SignUpRequest } from "./auth";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service auth.AuthRPC
 */
export interface IAuthRPCClient {
    /**
     * @generated from protobuf rpc: SignUp(auth.SignUpRequest) returns (auth.AuthResponse);
     */
    signUp(input: SignUpRequest, options?: RpcOptions): UnaryCall<SignUpRequest, AuthResponse>;
    /**
     * @generated from protobuf rpc: SignIn(auth.SignInRequest) returns (auth.AuthResponse);
     */
    signIn(input: SignInRequest, options?: RpcOptions): UnaryCall<SignInRequest, AuthResponse>;
    /**
     * @generated from protobuf rpc: IsUniqueUsername(auth.IsUniqueUsernamePayload) returns (auth.IsUnique);
     */
    isUniqueUsername(input: IsUniqueUsernamePayload, options?: RpcOptions): UnaryCall<IsUniqueUsernamePayload, IsUnique>;
    /**
     * @generated from protobuf rpc: VerifyUserEmail(general.UserId) returns (general.IsSuccess);
     */
    verifyUserEmail(input: UserId, options?: RpcOptions): UnaryCall<UserId, IsSuccess>;
    /**
     * @generated from protobuf rpc: ChangePassword(auth.ChangePasswordPayload) returns (general.IsSuccess);
     */
    changePassword(input: ChangePasswordPayload, options?: RpcOptions): UnaryCall<ChangePasswordPayload, IsSuccess>;
    /**
     * @generated from protobuf rpc: Logout(general.UserId) returns (general.IsSuccess);
     */
    logout(input: UserId, options?: RpcOptions): UnaryCall<UserId, IsSuccess>;
}
/**
 * @generated from protobuf service auth.AuthRPC
 */
export class AuthRPCClient implements IAuthRPCClient, ServiceInfo {
    typeName = AuthRPC.typeName;
    methods = AuthRPC.methods;
    options = AuthRPC.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SignUp(auth.SignUpRequest) returns (auth.AuthResponse);
     */
    signUp(input: SignUpRequest, options?: RpcOptions): UnaryCall<SignUpRequest, AuthResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SignUpRequest, AuthResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SignIn(auth.SignInRequest) returns (auth.AuthResponse);
     */
    signIn(input: SignInRequest, options?: RpcOptions): UnaryCall<SignInRequest, AuthResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SignInRequest, AuthResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: IsUniqueUsername(auth.IsUniqueUsernamePayload) returns (auth.IsUnique);
     */
    isUniqueUsername(input: IsUniqueUsernamePayload, options?: RpcOptions): UnaryCall<IsUniqueUsernamePayload, IsUnique> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<IsUniqueUsernamePayload, IsUnique>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VerifyUserEmail(general.UserId) returns (general.IsSuccess);
     */
    verifyUserEmail(input: UserId, options?: RpcOptions): UnaryCall<UserId, IsSuccess> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserId, IsSuccess>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ChangePassword(auth.ChangePasswordPayload) returns (general.IsSuccess);
     */
    changePassword(input: ChangePasswordPayload, options?: RpcOptions): UnaryCall<ChangePasswordPayload, IsSuccess> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangePasswordPayload, IsSuccess>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Logout(general.UserId) returns (general.IsSuccess);
     */
    logout(input: UserId, options?: RpcOptions): UnaryCall<UserId, IsSuccess> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserId, IsSuccess>("unary", this._transport, method, opt, input);
    }
}
